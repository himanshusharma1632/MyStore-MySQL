name: Deploy Application #name of the "workflow" on "github"

on: 
    push: 
        branches:
           - "main" # triggers this "deploy-app.yml" script on "push" to "branch - main"
    workflow_dispatch: 

jobs:

  # job-title (JOB - 1)
  release_deploy:

    # OS/Platform name (for running)
    runs-on: windows-latest
    
    # job (sub-task(s))
    steps:

        # COMMAND CONCEPT(s)
        # uses : "this command is required when the actual process-command supplied by the github-actions only, and is not our custom one."
        # run : "this command is used when we supply our custom process-command to this workflow-runner" 

        # -------------------------------------------------------------------------------------------- #
    
        # task - 1 | Checkout the Repository
        # concept | command "actions/checkout@v4" checks out latest commit on "main" where "deploy-app.yml" is triggered
        # conecpt | '@v4' is the 'checkout-runner' version utilized. It is 'semantic-version' (i.e v4's latest version from major v4)
        # concept | after checking out, it keeps the "repository-code" to "workflow-runner" (in this case "ubuntu-latest") 

        - name: Checkout Repository
          uses: actions/checkout@v4
        
        # -------------------------------------------------------------------------------------------- #

        # task - 2 | this "task" set-up the dotnet SDKs to the workflo-runner (i.e. ubuntu-latest herein.)
        - name: Set-Up Dotnet SDK(s)
          uses: actions/setup-dotnet@v3
          with:
            dotnet-version: 8.0.404 # currently installed-working dotnet version

        # -------------------------------------------------------------------------------------------- #

        # task - 3 | "refresh/restore" all "dotnet-dependencies" (in API.csproj)
        - name: Refresh/Install Dependencies
          run: dotnet restore # our custom supplied command
          
        # task - 4 | "build" the dotnet application
        - name: Build Application
          run: dotnet build --configuration Release --no-restore

        # task - 5 | run "unit-test(s)" into the application
        - name: Run Dotnet Unit Tests (optimization step)
          run: dotnet test --configuration Release --no-build --verbosity normal

        # task - 6 | check "pending-reboots" present over "github-action(s)"
        - name: Check Pending Reboot
          run: |
           if (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending") {
           Write-Output "Pending reboot detected. Please reboot the runner."                           
           exit 1 
           } else {
            Write-Output "No pending reboot detected."
           }
          
          shell: pwsh # use the "windows-powershell" to run the above-mentioned commands

        # task - 7 | install "web-deploy" into the workflow-runner
        - name: Install Web Deploy
          run: |
            if (!(Get-Command msdeploy.exe -ErrorAction SilentlyContinue)) {
              Write-Output "Web Deploy not found. Installing..."
              choco install webdeploy -y
            } else {
              Write-Output "Web Deploy is already installed."
            }
            Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
            refreshenv
          shell: pwsh # use the "windows-powershell" to run the above-mentioned commands 

        # task - 8 | "publish" dotnet application (prepare-for-deployment)
        - name: Publish Application
          run: dotnet publish API/API.csproj -c Release -o ./API/publish

        # task - 9 | debug-step - view "list" of all files inside "Himworld/API/publish"
        # concept | this "debug-step" will ensure that the publish folder is indeed created at runtime within "API/publish"
        # concept | since "./API/publish" would be present during deployment, so MonsterAsp.NET will pick up the content from "./API/publish" folder directly
        - name: Debug Step - View API/publish folder
          run: ls -R API/publish # this command will "look-inside (ls)" of "API/publish" folder (on repository) for its contents

        # task - 10 | "deploy" application to "MonsterAsp.NET" 
        # concept | use "publishSettings" file by "MonsterAsp.NET" to deploy directly to "cloud-hosting" using "WebDeploy Access" feature by "MonsterAsp.NET"
        - name: Deploy To MonsterAsp.NET
          run: |
           & "C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe" -verb:sync `
             -source:contentPath=$PWD/API/publish `
             -dest:contentPath=$env:secrets.MONSTER_ASPNET__SITENAME,computerName=$env:secrets.MONSTER_ASPNET__PUBLISH_URL,username=$env:secrets.MONSTER_ASPNET__USERNAME,password=$env:secrets.MONSTER_ASPNET__PASSWORD `
             -enableRule:AppOffline
          env:
           MONSTER_ASPNET__PUBLISH_URL: ${{ secrets.MONSTER_ASPNET__PUBLISH_URL }}
           MONSTER_ASPNET__USERNAME: ${{ secrets.MONSTER_ASPNET__USERNAME }}
           MONSTER_ASPNET__PASSWORD: ${{ secrets.MONSTER_ASPNET__PASSWORD }}
           MONSTER_ASPNET__SITENAME: ${{ secrets.MONSTER_ASPNET__SITENAME }}



    
    



         

       


